// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: api/repl/repl.proto

package repl

import (
	features "github.com/replit/go-replidentity/api/features"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Environment is used to namespace development Replit from production Replit
// since user ID collisions will occurr between them.
type Environment int32

const (
	Environment_DEVELOPMENT Environment = 0
	Environment_PRODUCTION  Environment = 1
)

// Enum value maps for Environment.
var (
	Environment_name = map[int32]string{
		0: "DEVELOPMENT",
		1: "PRODUCTION",
	}
	Environment_value = map[string]int32{
		"DEVELOPMENT": 0,
		"PRODUCTION":  1,
	}
)

func (x Environment) Enum() *Environment {
	p := new(Environment)
	*p = x
	return p
}

func (x Environment) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Environment) Descriptor() protoreflect.EnumDescriptor {
	return file_api_repl_repl_proto_enumTypes[0].Descriptor()
}

func (Environment) Type() protoreflect.EnumType {
	return &file_api_repl_repl_proto_enumTypes[0]
}

func (x Environment) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Environment.Descriptor instead.
func (Environment) EnumDescriptor() ([]byte, []int) {
	return file_api_repl_repl_proto_rawDescGZIP(), []int{0}
}

// Whether to persist filesystem, metadata, or both.
type Persistence int32

const (
	// This is the usual mode of operation: both filesystem and metadata will be
	// persisted.
	Persistence_PERSISTENT Persistence = 0
	// The ephemeral flag indicates the repl being connected to will have a time
	// restriction (~1h) on stored metadata: the records in all controlplane
	// tables. This has the consequence that repl will be forcibly terminated
	// and completely evicted from the cluster as-if it never existed, and will
	// then be unable to wakeup or serve static traffic. This option does NOT
	// affect filesystem and other data persistence.
	//
	// For context, this value is used on the client when repls are created for:
	// - replrun
	// - guests
	// - anon users
	// - temp vnc repls
	// - users with non-verified emails
	Persistence_EPHEMERAL Persistence = 1
	// This indicates that the repl being connected does not have the ability to
	// persist files or be woken up after the lifetime of this repl expires.
	//
	// For context, this value is used on the client when repls are created for:
	// - replrun
	// - guests
	// - language pages
	Persistence_NONE Persistence = 2
	// This indicates that the repl's filesystem should be mounted as read-only.
	Persistence_READ_ONLY Persistence = 3
)

// Enum value maps for Persistence.
var (
	Persistence_name = map[int32]string{
		0: "PERSISTENT",
		1: "EPHEMERAL",
		2: "NONE",
		3: "READ_ONLY",
	}
	Persistence_value = map[string]int32{
		"PERSISTENT": 0,
		"EPHEMERAL":  1,
		"NONE":       2,
		"READ_ONLY":  3,
	}
)

func (x Persistence) Enum() *Persistence {
	p := new(Persistence)
	*p = x
	return p
}

func (x Persistence) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Persistence) Descriptor() protoreflect.EnumDescriptor {
	return file_api_repl_repl_proto_enumTypes[1].Descriptor()
}

func (Persistence) Type() protoreflect.EnumType {
	return &file_api_repl_repl_proto_enumTypes[1]
}

func (x Persistence) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Persistence.Descriptor instead.
func (Persistence) EnumDescriptor() ([]byte, []int) {
	return file_api_repl_repl_proto_rawDescGZIP(), []int{1}
}

// Whether these limits are cachable, and if they are, by what facet of the
// token.
type ResourceLimits_Cachability int32

const (
	// Do not cache these limits.
	ResourceLimits_NONE ResourceLimits_Cachability = 0
	// These limits can be cached and applied to this and any of the user's
	// other repls.
	ResourceLimits_USER ResourceLimits_Cachability = 1
	// These limits can be cached and applied only to this repl.
	ResourceLimits_REPL ResourceLimits_Cachability = 2
)

// Enum value maps for ResourceLimits_Cachability.
var (
	ResourceLimits_Cachability_name = map[int32]string{
		0: "NONE",
		1: "USER",
		2: "REPL",
	}
	ResourceLimits_Cachability_value = map[string]int32{
		"NONE": 0,
		"USER": 1,
		"REPL": 2,
	}
)

func (x ResourceLimits_Cachability) Enum() *ResourceLimits_Cachability {
	p := new(ResourceLimits_Cachability)
	*p = x
	return p
}

func (x ResourceLimits_Cachability) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceLimits_Cachability) Descriptor() protoreflect.EnumDescriptor {
	return file_api_repl_repl_proto_enumTypes[2].Descriptor()
}

func (ResourceLimits_Cachability) Type() protoreflect.EnumType {
	return &file_api_repl_repl_proto_enumTypes[2]
}

func (x ResourceLimits_Cachability) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceLimits_Cachability.Descriptor instead.
func (ResourceLimits_Cachability) EnumDescriptor() ([]byte, []int) {
	return file_api_repl_repl_proto_rawDescGZIP(), []int{3, 0}
}

type Buckets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Snapshots is the GCS bucket where btrfs snapshots are stored.
	Snapshots string `protobuf:"bytes,1,opt,name=snapshots,proto3" json:"snapshots,omitempty"`
	// Metadata is the GCS bucket where OT metadata is stored.
	Metadata string `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *Buckets) Reset() {
	*x = Buckets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_repl_repl_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Buckets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Buckets) ProtoMessage() {}

func (x *Buckets) ProtoReflect() protoreflect.Message {
	mi := &file_api_repl_repl_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Buckets.ProtoReflect.Descriptor instead.
func (*Buckets) Descriptor() ([]byte, []int) {
	return file_api_repl_repl_proto_rawDescGZIP(), []int{0}
}

func (x *Buckets) GetSnapshots() string {
	if x != nil {
		return x.Snapshots
	}
	return ""
}

func (x *Buckets) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

// This message constitutes the repl metadata and define the repl we're
// connecting to. All fields are required unless otherwise stated.
type Repl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Language string `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
	// Bucket is GCS bucket where repl files are stored.
	Bucket string `protobuf:"bytes,3,opt,name=bucket,proto3" json:"bucket,omitempty"`
	Slug   string `protobuf:"bytes,4,opt,name=slug,proto3" json:"slug,omitempty"`
	// User is the username of the user who owns the repl. This may change if a
	// user changes their username.
	User string `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"`
	// (Optional) The replID of a repl to be used as the source filesystem. All
	// writes will still go to the actual repl. This is intended to be a
	// replacement for guest repls, giving us cheap COW semantics so all
	// connections can have a real repl.
	//
	// One exception:
	//
	// It's important to note that data is not implicitly copied from src to
	// dest. Only what is explicitly written when talking to pid1 (either
	// gcsfiles or snapshots) will persist. This makes it slightly different
	// than just forking.
	//
	// It's unclear what the behaviour should be if:
	// - the dest and src repl both exist
	// - the dest and src are the same
	// - we have an src but no dest
	// consider these unsupported/undefined for now.
	SourceRepl string `protobuf:"bytes,6,opt,name=sourceRepl,proto3" json:"sourceRepl,omitempty"`
	// Database is the ID for the repldb instance that is used for this repl. If
	// let empty, the repl ID is used.
	Database string `protobuf:"bytes,7,opt,name=database,proto3" json:"database,omitempty"`
	// Buckets are the GCS buckets where repl contents are stored.
	Buckets *Buckets `protobuf:"bytes,8,opt,name=buckets,proto3" json:"buckets,omitempty"`
	// User ID is the user's ID from Replit web. A user's ID will never change.
	UserId *UserId `protobuf:"bytes,9,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *Repl) Reset() {
	*x = Repl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_repl_repl_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Repl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Repl) ProtoMessage() {}

func (x *Repl) ProtoReflect() protoreflect.Message {
	mi := &file_api_repl_repl_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Repl.ProtoReflect.Descriptor instead.
func (*Repl) Descriptor() ([]byte, []int) {
	return file_api_repl_repl_proto_rawDescGZIP(), []int{1}
}

func (x *Repl) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Repl) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *Repl) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *Repl) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *Repl) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *Repl) GetSourceRepl() string {
	if x != nil {
		return x.SourceRepl
	}
	return ""
}

func (x *Repl) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *Repl) GetBuckets() *Buckets {
	if x != nil {
		return x.Buckets
	}
	return nil
}

func (x *Repl) GetUserId() *UserId {
	if x != nil {
		return x.UserId
	}
	return nil
}

type UserId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Environment Environment `protobuf:"varint,2,opt,name=environment,proto3,enum=replit.goval.api.repl.Environment" json:"environment,omitempty"`
}

func (x *UserId) Reset() {
	*x = UserId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_repl_repl_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserId) ProtoMessage() {}

func (x *UserId) ProtoReflect() protoreflect.Message {
	mi := &file_api_repl_repl_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserId.ProtoReflect.Descriptor instead.
func (*UserId) Descriptor() ([]byte, []int) {
	return file_api_repl_repl_proto_rawDescGZIP(), []int{2}
}

func (x *UserId) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserId) GetEnvironment() Environment {
	if x != nil {
		return x.Environment
	}
	return Environment_DEVELOPMENT
}

// The resource limits that should be applied to the Repl's container.
type ResourceLimits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether the repl has network access.
	Net bool `protobuf:"varint,1,opt,name=net,proto3" json:"net,omitempty"`
	// The amount of RAM in bytes that this repl will have.
	Memory int64 `protobuf:"varint,2,opt,name=memory,proto3" json:"memory,omitempty"`
	// The number of cores that the container will be allowed to have.
	Threads float64 `protobuf:"fixed64,3,opt,name=threads,proto3" json:"threads,omitempty"`
	// The Docker container weight factor for the scheduler. Similar to the
	// `--cpu-shares` commandline flag.
	Shares float64 `protobuf:"fixed64,4,opt,name=shares,proto3" json:"shares,omitempty"`
	// The size of the disk in bytes.
	Disk  int64                      `protobuf:"varint,5,opt,name=disk,proto3" json:"disk,omitempty"`
	Cache ResourceLimits_Cachability `protobuf:"varint,6,opt,name=cache,proto3,enum=replit.goval.api.repl.ResourceLimits_Cachability" json:"cache,omitempty"`
	// If set, apply a restrictive allowlist-based network policy to the container
	// The container will only be able to communicate with the minimum domains
	// necessary to make Replit work, such as package managers.
	RestrictNetwork bool `protobuf:"varint,7,opt,name=restrictNetwork,proto3" json:"restrictNetwork,omitempty"`
	// If set, don't attempt to wake this repl if it is not running and a HTTP
	// request arrives for it. If the repl is running by other means (e.g. the
	// workspace), the HTTP requests can still flow to it. This simply stops the
	// proxy from waking it.
	PreventWakeup bool `protobuf:"varint,8,opt,name=preventWakeup,proto3" json:"preventWakeup,omitempty"`
}

func (x *ResourceLimits) Reset() {
	*x = ResourceLimits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_repl_repl_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceLimits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceLimits) ProtoMessage() {}

func (x *ResourceLimits) ProtoReflect() protoreflect.Message {
	mi := &file_api_repl_repl_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceLimits.ProtoReflect.Descriptor instead.
func (*ResourceLimits) Descriptor() ([]byte, []int) {
	return file_api_repl_repl_proto_rawDescGZIP(), []int{3}
}

func (x *ResourceLimits) GetNet() bool {
	if x != nil {
		return x.Net
	}
	return false
}

func (x *ResourceLimits) GetMemory() int64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *ResourceLimits) GetThreads() float64 {
	if x != nil {
		return x.Threads
	}
	return 0
}

func (x *ResourceLimits) GetShares() float64 {
	if x != nil {
		return x.Shares
	}
	return 0
}

func (x *ResourceLimits) GetDisk() int64 {
	if x != nil {
		return x.Disk
	}
	return 0
}

func (x *ResourceLimits) GetCache() ResourceLimits_Cachability {
	if x != nil {
		return x.Cache
	}
	return ResourceLimits_NONE
}

func (x *ResourceLimits) GetRestrictNetwork() bool {
	if x != nil {
		return x.RestrictNetwork
	}
	return false
}

func (x *ResourceLimits) GetPreventWakeup() bool {
	if x != nil {
		return x.PreventWakeup
	}
	return false
}

// Permissions allow tokens to perform certain actions.
type Permissions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This token has permission to toggle the always on state of a container.
	// For a connection to send the AlwaysOn message, it must have this
	// permission.
	ToggleAlwaysOn bool `protobuf:"varint,1,opt,name=toggleAlwaysOn,proto3" json:"toggleAlwaysOn,omitempty"`
}

func (x *Permissions) Reset() {
	*x = Permissions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_repl_repl_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Permissions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Permissions) ProtoMessage() {}

func (x *Permissions) ProtoReflect() protoreflect.Message {
	mi := &file_api_repl_repl_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Permissions.ProtoReflect.Descriptor instead.
func (*Permissions) Descriptor() ([]byte, []int) {
	return file_api_repl_repl_proto_rawDescGZIP(), []int{4}
}

func (x *Permissions) GetToggleAlwaysOn() bool {
	if x != nil {
		return x.ToggleAlwaysOn
	}
	return false
}

// Metadata is a strict subset of ReplToken (with the same ordinals and
// everything).
type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Repl is the core metadata about the Repl. The Repl that matches the ID of
	// this field will have all of its fields updated to match the rest of the
	// contents of this message.
	Repl *Repl `protobuf:"bytes,7,opt,name=repl,proto3" json:"repl,omitempty"`
	// The resource limits for the container.
	ResourceLimits *ResourceLimits `protobuf:"bytes,10,opt,name=resourceLimits,proto3" json:"resourceLimits,omitempty"`
	// The resource limits for the container, when running in interactive mode.
	// These limits have priority over `resourceLimits` if present, and are never
	// cached.
	InteractiveResourceLimits *ResourceLimits `protobuf:"bytes,17,opt,name=interactiveResourceLimits,proto3" json:"interactiveResourceLimits,omitempty"`
	// Whether to persist filesystem, metadata, or both.  When connecting to an
	// already running/existing repl, its settings will be updated to match this
	// mode.
	Persistence Persistence `protobuf:"varint,6,opt,name=persistence,proto3,enum=replit.goval.api.repl.Persistence" json:"persistence,omitempty"`
	// Flags are handy for passing arbitrary configs along. Mostly used so
	// the client can try out new features
	Flags       []string     `protobuf:"bytes,14,rep,name=flags,proto3" json:"flags,omitempty"`
	Permissions *Permissions `protobuf:"bytes,15,opt,name=permissions,proto3" json:"permissions,omitempty"`
	// Features enable certain capabilities that are not enabled by default,
	// typically because they require specific support for the feature that needs
	// additional setup. Not every feature can coexist with each other, and
	// servers should reject acquires that mix features that are incompatible with
	// each other. Some features also require placement (via PlaceRepl) to have
	// used a certain subset to acquire a machine that supports the feature (for
	// example, GPUs can only be used on VMs that have GPUs, so placement must
	// place the repl on a VM with GPUs first).
	Features []*features.Feature `protobuf:"bytes,16,rep,name=features,proto3" json:"features,omitempty"`
	// BuildInfo is present if this is a build repl which is allowed to convert a
	// repl to a container image and deploy it to Replit's deployment infra.
	BuildInfo *BuildInfo `protobuf:"bytes,18,opt,name=build_info,json=buildInfo,proto3" json:"build_info,omitempty"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_repl_repl_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_api_repl_repl_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_api_repl_repl_proto_rawDescGZIP(), []int{5}
}

func (x *Metadata) GetRepl() *Repl {
	if x != nil {
		return x.Repl
	}
	return nil
}

func (x *Metadata) GetResourceLimits() *ResourceLimits {
	if x != nil {
		return x.ResourceLimits
	}
	return nil
}

func (x *Metadata) GetInteractiveResourceLimits() *ResourceLimits {
	if x != nil {
		return x.InteractiveResourceLimits
	}
	return nil
}

func (x *Metadata) GetPersistence() Persistence {
	if x != nil {
		return x.Persistence
	}
	return Persistence_PERSISTENT
}

func (x *Metadata) GetFlags() []string {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *Metadata) GetPermissions() *Permissions {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *Metadata) GetFeatures() []*features.Feature {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *Metadata) GetBuildInfo() *BuildInfo {
	if x != nil {
		return x.BuildInfo
	}
	return nil
}

// BuildInfo includes information about which deployment this repl is allowed to
// create or update.
type BuildInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is a unique identitifier for the deployment that this builder repl is
	// allowed to push to.
	DeploymentId string `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	// URL is the replit.app URL that will be used for the deployment.
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	// Build ID is a unique identifier for this particular deployment build
	BuildId string `protobuf:"bytes,3,opt,name=build_id,json=buildId,proto3" json:"build_id,omitempty"`
	// Tier refers to the GCE machine tier that will be used for the build
	MachineTier string `protobuf:"bytes,4,opt,name=machine_tier,json=machineTier,proto3" json:"machine_tier,omitempty"`
}

func (x *BuildInfo) Reset() {
	*x = BuildInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_repl_repl_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildInfo) ProtoMessage() {}

func (x *BuildInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_repl_repl_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildInfo.ProtoReflect.Descriptor instead.
func (*BuildInfo) Descriptor() ([]byte, []int) {
	return file_api_repl_repl_proto_rawDescGZIP(), []int{6}
}

func (x *BuildInfo) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *BuildInfo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *BuildInfo) GetBuildId() string {
	if x != nil {
		return x.BuildId
	}
	return ""
}

func (x *BuildInfo) GetMachineTier() string {
	if x != nil {
		return x.MachineTier
	}
	return ""
}

var File_api_repl_repl_proto protoreflect.FileDescriptor

var file_api_repl_repl_proto_rawDesc = []byte{
	0x0a, 0x13, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x70, 0x6c, 0x2f, 0x72, 0x65, 0x70, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x74, 0x2e, 0x67, 0x6f,
	0x76, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x1a, 0x1b, 0x61, 0x70,
	0x69, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x43, 0x0a, 0x07, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa0,
	0x02, 0x0a, 0x04, 0x52, 0x65, 0x70, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x6c, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12,
	0x38, 0x0a, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x74, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x52, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x74, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65,
	0x70, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x5e, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x0b, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x22, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x74, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0xc6, 0x02, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x03, 0x6e, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x64, 0x69, 0x73, 0x6b, 0x12, 0x47, 0x0a, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x74, 0x2e, 0x67, 0x6f, 0x76,
	0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x57, 0x61, 0x6b, 0x65, 0x75, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x57, 0x61, 0x6b, 0x65, 0x75, 0x70, 0x22, 0x2b, 0x0a,
	0x0b, 0x43, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x53, 0x45, 0x52, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x52, 0x45, 0x50, 0x4c, 0x10, 0x02, 0x22, 0x35, 0x0a, 0x0b, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x67,
	0x67, 0x6c, 0x65, 0x41, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x4f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x41, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x4f,
	0x6e, 0x22, 0x92, 0x04, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2f,
	0x0a, 0x04, 0x72, 0x65, 0x70, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x74, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x72, 0x65, 0x70, 0x6c, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6c, 0x12,
	0x4d, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x74,
	0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x0e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x63,
	0x0a, 0x19, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x74, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x19, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x74, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x70, 0x6c,
	0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x70, 0x65,
	0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12,
	0x44, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x74, 0x2e, 0x67, 0x6f,
	0x76, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x2e, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x74,
	0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x08, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0a, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x74, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x70,
	0x6c, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x80, 0x01, 0x0a, 0x09, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x69, 0x65, 0x72, 0x2a, 0x2e, 0x0a, 0x0b, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x45, 0x56, 0x45,
	0x4c, 0x4f, 0x50, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x52, 0x4f,
	0x44, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x2a, 0x45, 0x0a, 0x0b, 0x50, 0x65, 0x72,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x45, 0x52, 0x53,
	0x49, 0x53, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x50, 0x48, 0x45,
	0x4d, 0x45, 0x52, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x02, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x03,
	0x42, 0x22, 0x5a, 0x20, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x74, 0x2f, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x72, 0x65, 0x70, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_repl_repl_proto_rawDescOnce sync.Once
	file_api_repl_repl_proto_rawDescData = file_api_repl_repl_proto_rawDesc
)

func file_api_repl_repl_proto_rawDescGZIP() []byte {
	file_api_repl_repl_proto_rawDescOnce.Do(func() {
		file_api_repl_repl_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_repl_repl_proto_rawDescData)
	})
	return file_api_repl_repl_proto_rawDescData
}

var file_api_repl_repl_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_api_repl_repl_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_api_repl_repl_proto_goTypes = []interface{}{
	(Environment)(0),                // 0: replit.goval.api.repl.Environment
	(Persistence)(0),                // 1: replit.goval.api.repl.Persistence
	(ResourceLimits_Cachability)(0), // 2: replit.goval.api.repl.ResourceLimits.Cachability
	(*Buckets)(nil),                 // 3: replit.goval.api.repl.Buckets
	(*Repl)(nil),                    // 4: replit.goval.api.repl.Repl
	(*UserId)(nil),                  // 5: replit.goval.api.repl.UserId
	(*ResourceLimits)(nil),          // 6: replit.goval.api.repl.ResourceLimits
	(*Permissions)(nil),             // 7: replit.goval.api.repl.Permissions
	(*Metadata)(nil),                // 8: replit.goval.api.repl.Metadata
	(*BuildInfo)(nil),               // 9: replit.goval.api.repl.BuildInfo
	(*features.Feature)(nil),        // 10: replit.goval.api.features.Feature
}
var file_api_repl_repl_proto_depIdxs = []int32{
	3,  // 0: replit.goval.api.repl.Repl.buckets:type_name -> replit.goval.api.repl.Buckets
	5,  // 1: replit.goval.api.repl.Repl.user_id:type_name -> replit.goval.api.repl.UserId
	0,  // 2: replit.goval.api.repl.UserId.environment:type_name -> replit.goval.api.repl.Environment
	2,  // 3: replit.goval.api.repl.ResourceLimits.cache:type_name -> replit.goval.api.repl.ResourceLimits.Cachability
	4,  // 4: replit.goval.api.repl.Metadata.repl:type_name -> replit.goval.api.repl.Repl
	6,  // 5: replit.goval.api.repl.Metadata.resourceLimits:type_name -> replit.goval.api.repl.ResourceLimits
	6,  // 6: replit.goval.api.repl.Metadata.interactiveResourceLimits:type_name -> replit.goval.api.repl.ResourceLimits
	1,  // 7: replit.goval.api.repl.Metadata.persistence:type_name -> replit.goval.api.repl.Persistence
	7,  // 8: replit.goval.api.repl.Metadata.permissions:type_name -> replit.goval.api.repl.Permissions
	10, // 9: replit.goval.api.repl.Metadata.features:type_name -> replit.goval.api.features.Feature
	9,  // 10: replit.goval.api.repl.Metadata.build_info:type_name -> replit.goval.api.repl.BuildInfo
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_api_repl_repl_proto_init() }
func file_api_repl_repl_proto_init() {
	if File_api_repl_repl_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_repl_repl_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Buckets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_repl_repl_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Repl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_repl_repl_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_repl_repl_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceLimits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_repl_repl_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Permissions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_repl_repl_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_repl_repl_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_repl_repl_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_repl_repl_proto_goTypes,
		DependencyIndexes: file_api_repl_repl_proto_depIdxs,
		EnumInfos:         file_api_repl_repl_proto_enumTypes,
		MessageInfos:      file_api_repl_repl_proto_msgTypes,
	}.Build()
	File_api_repl_repl_proto = out.File
	file_api_repl_repl_proto_rawDesc = nil
	file_api_repl_repl_proto_goTypes = nil
	file_api_repl_repl_proto_depIdxs = nil
}
